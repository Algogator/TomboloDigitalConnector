apply plugin: 'java'
apply plugin: 'eclipse'

repositories {
    maven { name = "osgeo"; url = "http://download.osgeo.org/webdav/geotools/" }
    maven { name = "hibernatespatial"; url = "http://www.hibernatespatial.org/repository/" }
    mavenCentral()
}

dependencies {
	// Geo Tools
	compile group:'org.geotools',			name: 'gt-referencing', 	version: '9.0'
	compile group:'org.geotools',			name: 'gt-geojson', 		version: '9.0'
	compile group:'org.geotools',			name: 'gt-epsg-extension', 	version: '9.0'
	compile group:'org.geotools',			name: 'gt-epsg-hsql',		version: '9.0'

    // POI Excel file manipulation
	compile group: 'org.apache.poi',		name: 'poi',		version: '3.13'
	compile group: 'org.apache.poi',		name: 'poi-ooxml',	version: '3.13'
	
	// JSON handling
	compile group: 'javax.json', 			name: 'javax.json-api',		version: '1.0'
	compile group: 'com.googlecode.json-simple', name: 'json-simple', 	version: '1.1.1'
	compile group: 'com.google.code.gson',	name: 'gson', 				version: '2.4'
	
	// Commons
	compile group: 'commons-io',			name: 'commons-io',				version: '2.4'
	compile group: 'org.apache.commons',	name: 'commons-compress',		version: '1.10'
	compile group: 'org.apache.commons',	name: 'commons-collections4',	version: '4.1'
	compile group: 'org.apache.commons',	name: 'commons-csv',			version: '1.2'
	
	// ORM
	compile group: 'org.postgresql', 		name: 'postgresql', 			version: '9.4-1200-jdbc41'
	compile group: 'org.hibernate', 		name: 'hibernate-core',			version: '4.3.6.Final'
	//compile group: 'org.hibernate',			name: 'hibernate-annotations',	version: '3.5.6-Final'
	compile group: 'org.hibernate',			name: 'hibernate-spatial',		version: '4.3'

	compile group: 'org.postgis',			name: 'postgis-jdbc',		version: '1.5.2'
	compile group: 'org.hibernate.javax.persistence',	name: 'hibernate-jpa-2.1-api',	version: '1.0.0.Final'

	// Testing
	testCompile group: 'org.mockito',			name: 'mockito-core',			version: '1.10.19'
	testCompile group: 'com.jayway.jsonpath',	name: 'json-path',			version: '2.2.0'
	testCompile group: 'com.jayway.jsonpath',	name: 'json-path-assert',			version: '2.2.0'

	// Logging
	compile group: 'ch.qos.logback',	name: 'logback-classic',	version: '1.1.3'
	
}

task copyDeps(type: Copy) {
	from configurations.runtime
	into 'build/dependency-cache/'
}

task runExport(dependsOn: ['classes'], type: JavaExec) {
	main = 'uk.org.tombolo.DataExportRunner'
	classpath = sourceSets.main.runtimeClasspath

	doFirst {
		def configured = project.hasProperty('databaseURI') && project.hasProperty('databaseUsername') && project.hasProperty('databasePassword');
		if (!configured) throw new GradleException('Environment not configured. See the README.')

		systemProperty("databaseURI", databaseURI)
		systemProperty("databaseUsername", databaseUsername)
		systemProperty("databasePassword", databasePassword)
		systemProperty("environment", "export")

		def argumentsSet = project.hasProperty('dataExportSpecFile') && project.hasProperty('outputFile') && project.hasProperty('doImport');
		if (!argumentsSet) throw new GradleException('Required properties not specified. See the README.')

		args(dataExportSpecFile, outputFile, doImport)
	}
}

test {
	maxHeapSize = "1024m"

	doFirst {
		def configured = project.hasProperty('testDatabaseURI') && project.hasProperty('testDatabaseUsername') && project.hasProperty('testDatabasePassword');
		if (!configured) throw new GradleException('Test environment not configured. See the README.')

		systemProperty("databaseURI", testDatabaseURI)
		systemProperty("databaseUsername", testDatabaseUsername)
		systemProperty("databasePassword", testDatabasePassword)
		systemProperty("environment", "test")
	}
}
